<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
    <!--注册过滤器，防止中文乱码-->
    <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceRequestEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
        <init-param>
            <param-name>forceResponseEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    <!--使用过滤器注册springSecurityFileChain对象-->
    <!--
        注意：名称必须为springSecurityFilterChain，
              springSecurity通过这个名称加载DelegatingFilterProxy
    -->
    <filter>
        <filter-name>springSecurityFilterChain</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>springSecurityFilterChain</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    <!--指定spring配置文件-->
<!--    <context-param>-->
<!--        <param-name>contextConfigLocation</param-name>-->
<!--        <param-value>classpath:spring-persist-*.xml</param-value>-->
<!--    </context-param>-->
    <!--注册监听器，在tomcat启动时创建spring容器对象-->
<!--    <listener>-->
<!--        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>-->
<!--    </listener>-->


    <!--声明DispatcherServlet（前置控制器，中央处理器）对象，在内部根据springMvc配置文件创建springMvc容器对象-->
    <servlet>
        <servlet-name>dispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--指定springMvc配置文件位置-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <!--
                由于ssm整合Spring Security时会出现找不到bean: springSecurityFilterChain 错误
                原因：（见PDF）
                解决方案：
                        一：将spring的IOC容器和springMVC的IOC容器合二为一，
                                统一交由springMVC的IOC容器管理（本项目采用）
                        二：修改SpringSecurity的源码
            -->
            <param-value>classpath:spring-web-mvc.xml,classpath:spring-persist-*.xml</param-value>
        </init-param>
        <!--设置在tomcat启动时创建对象的优先级，通常是大于等于0的整数，数值越小，优先级越高-->
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>dispatcherServlet</servlet-name>
<!--        <url-pattern>/</url-pattern>-->
        <!--
            *.html  扩展名
                     举例
                    http://localhost:8080/atcrowdfunding02-admin-webui/save/emp.html
                     作用：伪静态
                    表面上看起来是一个访问静态资源的请求，但是实际上是由 SpringMVC
                    交给 handler 来处理的动态资源。
                     好处 1：有利于 SEO 优化
                    让搜索引擎更容易找到我们的网站，有利于网站的推广
                     好处 2：隐藏后端技术实现细节
                    给黑客入侵系统增加难度
                     好处 3：自动解决静态资源访问问题
                    访问 a.png 本身不符合*.html 这个 url-pattern，和 SpringMVC 完全没
                    有关系，当前请求由 Tomcat 处理。
                    如 果 url-pattern 映 射 了 “ / ”， 那 么 SpringMVC 中 还 需 要 配 置
                    DefaultServletHandler。
                     缺陷：不符合 RESTFUL 风格
            *.json  扩展名
                    请求扩展名 http://localhost:8080/extra01-ajax/get/emp/by/ajax.html
                    服务器端打算返回的数据：JSON  格式
                    二者不匹配！ ！！ ！ ！
                     分析问题
                    请求扩展名和响应体的数据格式不匹配！！！
                    让请求扩展名和预计的响应体数据格式一致。
                    http://localhost:8080/extra01-ajax/get/emp/by/ajax.json
                    同时让 SpringMVC 在映射*.html 扩展名之外再 映射*.json  扩展名，不然会
                    返回 404
        -->
        <url-pattern>*.html</url-pattern>
        <url-pattern>*.json</url-pattern>
    </servlet-mapping>
</web-app>